@import "../variabels/grid";
@import "../mixins/clearfix";

// Reverses a list of numbers (or in our case, fractions)
//
// @param {fractions} $list - A list of numbers or fractions to be reversed.
//
// @example
//   $foo: 1/2 1/3 1/4;
//   _reverse($foo);
//
// @return {fractions}
//
// @access private

@function _reverse($list) {
    @if length($list) == 1 {
        @return $list;
    }

    @for $i from 1 through ceil(length($list)/2) {
        $tmp: _reverse(nth($list, $i));
        $list: set-nth($list, $i, nth($list, -$i));
        $list: set-nth($list, -$i, $tmp);
    }

    @return $list;
}


// Gets a column's width and gutter size as an integer.
//
// @param {fraction} $ratios [1] - A list of fractions to be used in calculating the appropriate width and gutter size returned.
// @param {number} $gutter [$grid__gutter] - The gutter size used to generate an appropriate width and gutter size to be returned by the function.
//
// @example
//   .third {
//     width: _strip-units(nth(_get-column(1/3, '30px'), 1)) * 1%;
//   }
//
// @return {fraction | number}
//
// @access private

@function _get-column($ratios: 1, $gutter: $grid__gutter) {
    $ratios: _reverse($ratios);
    $width: 100;

    @each $ratio in $ratios {
        $gutter: $gutter / $width * 100;
        $width: 100 * $ratio - $gutter;
    }

    @return $width $gutter;
}


// Strip a number of whatever units are applied to it.
//
// @param {number} $number - A number to have the units stripped from.
//
// @example
//   _strip-units('90em');
//
// @return {number}
//
// @access private

@function _strip-units($number) {
    @return $number / ($number * 0 + 1);
}


// Lost Grid v1.1.1 - https://github.com/corysimmons/lost

// Apply a negative margin on each side of the element. This is required when adding columns and such to negate their outer margins. This mixin automatically applies clearfix as it's assumed floated elements will be nested within it.
//
// @param {fraction} $ratios [1] - If $grid__old-browsers is false, a single fraction used to determine the negative left and right margins of the element. If $grid__old-browsers is true, a collection of container ratios (fractions).
// @param {number} $gutter [$grid__gutter] - The gutter width. This is typically left alone, but if you want a specific row/column combination to have a larger or smaller gutter, you need to specify the same $gutter on both types of elements.
//
// @example
//   .parent {
//     @include row();
//     .children {
//       @include column(1/2);
//     }
//   }

@mixin row($gutter: $grid__gutter) {
    @include clearfix();

    margin-left: -($gutter / 2);
    margin-right: -($gutter / 2);
}


// Creates a column that is a fraction of the size of it's containing element with a margin on each side of the element. If $grid__old-browsers is set to false, you don't need to pass any additional ratios (fractions), as the grid system will make use of calc(). If $grid__old-browsers is set to true, the grid system will support more browsers, but you will need to pass additional ratios for each nested container. It's highly recommended you use the calc() syntax to avoid confusion.
//
// @param {fraction} $ratios [1] - If $grid__old-browsers is false, this is a simple fraction of the containing element's width. If $grid__old-browsers is true, this is a collection of fractions with the containing element's fraction passed each time it is nested.
// @param {number} $gutter [$grid__gutter] - The margin on each side of the element used to create a gutter. Typically this is left alone, but if you need to have a specifically large or small gutter, you will need to alter this along with the containing row's gutter so they are the same.
// @param {boolean} $output [normal] - Determines what type of code to output. Accepts normal (all styles for a column), init (the initial styles of any column), or bare (just the width of the column). Useful for creating CSS classes with Lost.
//
// @example
//   .parent {
//     .children {
//       @include column(1/4);
//     }
//   }
//
// @example
//   .parent {
//     .child {
//       @include column(1/2);
//       .nested-parent {
//         .nested-child {
//           @include column(1/4 1/2);
//         }
//       }
//     }
//   }

@mixin column($ratios: 1, $gutter: $grid__gutter, $output: normal) {
    @if ($output == init) or ($output == normal)  {
        @if ($grid__rtl) {
            float: right;
        } @else {
            float: left;
        }
    }

    $ratios: nth($ratios, 1);

    @if ($gutter > 0) {
        @if ($output == normal) or ($output == bare) {
            width: calc(100% * #{$ratios} - #{$gutter});
        }

        @if ($output == normal) or ($output == init) {
            margin-left: ($gutter / 2);
            margin-right: ($gutter / 2);
        }
    }

    @if ($gutter == 0) {
        @if ($output == normal) or ($output == bare) {
            width: calc(100% * #{$ratios});
        }
    }
}


// Margin to the left or right of an elements depending on if the fraction passed is positive or negative.
//
// @param {fraction} $ratios [false] - Fraction of the container to be offset.
// @param {number} $gutter [$grid__gutter] - How large the gutter involved is, typically this won't be adjusted, but if you have set the columns for that row to have different gutters than default, you will need to match that gutter here as well.
//
// @example
//   .two-elements {
//     @include column(1/3);
//     &:nth-child(2) {
//       @include offset(1/3);
//     }
//   }

@mixin offset($ratios: false, $gutter: $grid__gutter) {
    $ratios: nth($ratios, 1);

    @if ($gutter > 0) {
        @if ($ratios > 0) {
            margin-left: calc(100% * #{$ratios} + (#{$gutter} / 2));
        }

        @if ($ratios < 0) {
            margin-right: calc(-100% * #{$ratios} + (#{$gutter} / 2));
        }
    }

    @if ($gutter == 0) {
        @if ($ratios > 0) {
            margin-left: calc(100% * #{$ratios});
        }

        @if ($ratios < 0) {
            margin-right: calc(-100% * #{$ratios});
        }
    }
}


// Since columns are floated, when they are of unequal height, they will misalign easily. By setting cycle() you can make sure elements are being cleared on appropriate rows.
//
// @param {number} $item [-1] - The nth-child + 1 element to clear on. If you want a row to be 3 elements wide, then you'd pass 3.
//
// @example
//   .gallery {
//     img {
//       @include column(1/3);
//       @include cycle(3);
//     }
//   }

@mixin cycle($item: -1) {
    &:nth-child(n) {
        clear: none;
    }
    &:nth-child(#{$item}n + 1) {
        clear: both;
    }
}
